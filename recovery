#!/usr/bin/python2.7

import argparse
import sys
import multisigrecovery.commands
from multisigrecovery.commands import ScriptInputError


EXAMPLES = """
Testing:
./recovery address --origin <KS1,KS2,KS3> --path 0/0/0

Recovery:
./recovery create --origin <KS1,KS2,KS3> --destination <KS1,KS2,KS3> --save <FILE>
./recovery validate --load <FILE>
./recovery cosign --load <FILE> --seed <SEED> --save <FILE>
./recovery broadcast --load <FILE>

KS(n) above is account key source: master key, a seed, or account keys service. Accepted formats:
 - extended public key (xpub69mdgvyDG2w...)
 - extended private key (xprv...)
 - seed in hex format (54b426b3e6766...)
 - CryptoCorp Oracle API URL (https://s.digitaloracle.co/)
 - Path to .json file with account_i:pubkey map (samples/account-keys.json)

Sample files:
 - samples/account-keys.json : If you cannot derive account keys of one of your partners (eg they use hardened accounts),
        you can supply a list of account indexes and xPubs as a json file. Typically, you would import this from your DB.
        Add this file as one of account key sources, eg: --origin seed1,samples/account-keys.json,xpub3
 - samples/known-accounts.json : Speed up recovery if you can export a list of created accounts from your DB. If not used,
        script will attempt to recover all accounts based on account and address gap limit. See the file for example
        formatting. Usage: --accounts samples/known-accounts.json
 - samples/account-registrations.json : you will need to supply account personal information in this format to register
        accounts on CryptoCorp for the new branch. Usage: --register samples/account-registrations.json
 """


def main():
	parser = argparse.ArgumentParser(description='BitOasis multisig branch recovery script', formatter_class=argparse.RawDescriptionHelpFormatter)
	parser.add_argument('command', choices=['address', 'create', 'validate', 'cosign', 'broadcast'])
	parser.add_argument('--load', metavar='FILE', help='Load from batch file (cosign, broadcast)')
	parser.add_argument('--save', metavar='FILE', help='Save to batch file (create, cosign)')
	parser.add_argument('--origin', metavar='MKs', help='Original branch keys, comma separated (create,address)')
	parser.add_argument('--destination', metavar='MKs', help='Destination branch keys, comma separated (create)')
	parser.add_argument('--accounts', metavar='FILE', help='Use list of known account indexes. (create)')
	parser.add_argument('--insight', metavar='URL', help='Default: http://127.0.0.1:4001/ (create, broadcast)', default='http://127.0.0.1:4001/')
	parser.add_argument('--origin-template', dest='origin_template', metavar='TYPE', help='bip32(default)|bip32_hardened|bitoasis_v1 (create,address)', default='bip32', choices=['bitoasis_v1', 'bip32', 'bip32_hardened'])
	parser.add_argument('--destination-template', dest='destination_template', metavar='TYPE', help='bip32(default)|bip32_hardened|bitoasis_v1 (create)', default='bip32', choices=['bitoasis_v1', 'bip32', 'bip32_hardened'])
	parser.add_argument('--private', metavar='KEY', help='Signing hex seed or xprv (cosign)')
	parser.add_argument('--register', metavar='FILE', help='New accouts data file for CC API (create)')
	parser.add_argument('--path', metavar='n/n/n', help='Path to address to show acct/change/n (address)')
	parser.epilog = EXAMPLES
	args = parser.parse_args()
	arguments = {
		# False: cannot use this arg, True: must use this arg, ommit: voluntary arg
		'address': {'load': False, 'origin': True, 'destination': False, 'path': True, 'save': False, 'accounts': False},
		'create': {'load': False, 'origin': True, 'destination': True, 'private': False, 'save': True},
		'validate': {'load': True, 'origin': False, 'destination': False, 'private': False, 'save': False, 'accounts': False},
	    'cosign': {'load': True, 'origin': False, 'destination': False, 'private': True, 'save': True, 'accounts': False},
	    'broadcast': {'load': True, 'origin': False, 'destination': False, 'private': False, 'save': False, 'accounts': False},
	}

	try:
		# check command-argument pairs
		for argument, expected in arguments[args.command].items():
			supplied = getattr(args, argument) is not None
			if supplied and not expected:
				raise ScriptInputError('%s: unexpected argument: --%s\n' % (args.command, argument))
			if expected and not supplied:
				raise ScriptInputError('%s: missing argument: --%s\n' % (args.command, argument))

		# run the command
		getattr(multisigrecovery.commands, args.command)(args)

	except (ScriptInputError, NotImplementedError), err:
		sys.stderr.write('%s:\n%s\n' % (err.__class__.__name__, err.message))


if __name__ == '__main__':
	main()
